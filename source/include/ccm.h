#ifndef __CCM_H__
#define __CCM_H__

#include "paddr.h"
#include "aips.h"

#define ccm ((aips_1_s*)AIPS_1_OFFSET)->ccm
#define anatop ((aips_1_s*)AIPS_1_OFFSET)->anatop

enum ANATOP_PLL_ARM_BITS {
    ANATOP_PLL_ARM_BITS_DIV_SELECT = 0,
    ANATOP_PLL_ARM_BITS_POWERDOWN = 12,
    ANATOP_PLL_ARM_BITS_ENABLE,
    ANATOP_PLL_ARM_BITS_BYPASS_CLK_SRC,
    ANATOP_PLL_ARM_BITS_BYPASS = 16,
    ANATOP_PLL_ARM_BITS_LOCK = 31
};

#define ANATOP_PLL_ARM_BITMASK_DIV_SELECT 0b1111111
#define ANATOP_PLL_ARM_BITMASK_BYPASS_CLK_SRC 0b11

#define CCM_CACCR_BITS_ARM_PODF 0
#define CCM_CACCR_BITMASK_ARM_PODF 0b111

enum CCM_CBCDR_BITS {
    CCM_CBCDR_BITS_SEMC_CLK_SEL = 6,
    CCM_CBCDR_BITS_SEMC_ALT_CLK_SEL,
    CCM_CBCDR_BITS_IPG_PODF,
    CCM_CBCDR_BITS_AHB_PODF = 10,
    CCM_CBCDR_BITS_SEMC_PODF = 16,
    CCM_CBCDR_BITS_PERIPH_CLK_SEL = 25,
    CCM_CBCDR_BITS_PERIPH_CLK2_PODF = 27
};

#define CCM_CBCDR_BITMASK_AHB_PODF 0b111
#define CCM_CBCDR_BITMASK_IPG_PODF 0b11

enum CCM_CSCDR1_BITS {
    CCM_CSCDR1_BITS_UART_CLK_PODF,
    CCM_CSCDR1_BITS_UART_CLK_SEL = 6,
    CCM_CSCDR1_BITS_USDHC1_PODF = 11,
    CCM_CSCDR1_BITS_USDHC2_PODF = 16,
    CCM_CSCDR1_BITS_TRACE_PODF = 25,
};

#define CCM_CSCDR1_BITMASK_UART_CLK_PODF 0b111111

enum CCM_CDHIPR_BITS {
    CCM_CDHIPR_BITS_SEMC_PODF_BUSY = 0,
    CCM_CDHIPR_BITS_AHB_PODF_BUSY,
    CCM_CDHIPR_BITS_PERIPH2_CLK_SEL_BUSY = 3,
    CCM_CDHIPR_BITS_PERIPH_CLK_SEL_BUSY = 5,
    CCM_CDHIPR_BITS_ARM_PODF_BUSY = 16
};

#define CCM_MELT_ARM_FREQ 984000000
#define CCM_MAX_OC_ARM_FREQ 792000000
#define CCM_MAX_ARM_FREQ 600000000
#define CCM_FULL_SPEED_ARM_FREQ 528000000
#define CCM_MIN_ARM_FREQ 24000000
#define CCM_MAX_PLL_ARM_FREQ 1300000000
#define CCM_MIN_PLL_ARM_FREQ 650000000
#define CCM_PLL_ARM_REF_OSC_FREQ 24000000 // yh
#define CCM_MAX_IPG_FREQ 150000000
#define CCM_FULL_SPEED_IPG_FREQ 132000000

#define CCM_1150MV_MAX_IPG_FREQ CCM_FULL_SPEED_IPG_FREQ
#define CCM_1150MV_MAX_ARM_FREQ CCM_FULL_SPEED_ARM_FREQ
#define CCM_1250MV_MAX_ARM_FREQ CCM_MAX_ARM_FREQ
#define CCM_1400MV_MAX_ARM_FREQ CCM_MAX_OC_ARM_FREQ

#define CCM_ARM_CLKF_984MHZ (82 | (1 << 8) | (1 << 16) | (4 << 24))
#define CCM_ARM_CLKF_792MHZ (66 | (1 << 8) | (1 << 16) | (4 << 24))
#define CCM_ARM_CLKF_600MHZ (100 | (2 << 8) | (1 << 16) | (4 << 24))
#define CCM_ARM_CLKF_528MHZ (88 | (2 << 8) | (1 << 16) | (4 << 24))
#define CCM_ARM_CLKF_480MHZ (80 | (2 << 8) | (1 << 16) | (4 << 24))
#define CCM_ARM_CLKF_396MHZ (66 | (2 << 8) | (1 << 16) | (3 << 24))
#define CCM_ARM_CLKF_300MHZ (100 | (4 << 8) | (1 << 16) | (2 << 24))
#define CCM_ARM_CLKF_200MHZ (100 | (6 << 8) | (1 << 16) | (2 << 24))
#define CCM_ARM_CLKF_100MHZ (100 | (6 << 8) | (2 << 16) | (1 << 24))
#define CCM_ARM_CLKF_24MHZ (56 | (7 << 8) | (4 << 16) | (1 << 24))

#define CCM_ARM_CLKF_LP CCM_ARM_CLKF_24MHZ
#define CCM_ARM_CLKF_DEFAULT CCM_ARM_CLKF_396MHZ
#define CCM_ARM_CLKF_FULL_SPEED CCM_ARM_CLKF_528MHZ // normal, safe freq
#define CCM_ARM_CLKF_OVERDRIVE CCM_ARM_CLKF_600MHZ  // reqs higher voltage, shortens lifespan
#define CCM_ARM_CLKF_OC CCM_ARM_CLKF_792MHZ         // ^ + cooler required
#define CCM_ARM_CLKF_MELT CCM_ARM_CLKF_984MHZ       // ^ + it will probably melt

enum CCM_CORE_CLKF_BITS {
    CCM_CORE_CLKF_BITS_DIV_SELECT = 0,
    CCM_CORE_CLKF_BITS_ARM_PODF = 8,
    CCM_CORE_CLKF_BITS_AHB_PODF = 16,
    CCM_CORE_CLKF_BITS_IPG_PODF = 24
};

enum CCM_CCG_CLOCK_ACTIVITY_MODES {
    CCM_CCG_ALWAYS_OFF = 0,
    CCM_CCG_RUN_MODE_ONLY,
    CCM_CCG_ALWAYS_ON = 0b11
};
#define CCM_CCGR_DEVICE_BITMASK 0b11

enum CCM_CCG_DEVICES {
    CCM_CCG_AIPS_TZ1 = 0,
    CCM_CCG_AIPS_TZ2,
    CCM_CCG_MQS,
    CCM_CCG_SIM_M_R = 4,
    CCM_CCG_DCP,
    CCM_CCG_LPUART3,
    CCM_CCG_CAN1_BUS,
    CCM_CCG_CAN1_SERIAL,
    CCM_CCG_CAN2_BUS,
    CCM_CCG_CAN2_SERIAL,
    CCM_CCG_TRACE,
    CCM_CCG_GPT2_BUS,
    CCM_CCG_GPT2_SERIAL,
    CCM_CCG_LPUART2,
    CCM_CCG_GPIO2,
    CCM_CCG_LPSPI1,
    CCM_CCG_LPSPI2,
    CCM_CCG_LPSPI3,
    CCM_CCG_LPSPI4,
    CCM_CCG_ADC2,
    CCM_CCG_ENET,
    CCM_CCG_PIT,
    CCM_CCG_AOI2,
    CCM_CCG_ADC1,
    CCM_CCG_SEMC_EXSC,
    CCM_CCG_GPT1_BUS,
    CCM_CCG_GPT1_SERIAL,
    CCM_CCG_LPUART4,
    CCM_CCG_GPIO1,
    CCM_CCG_CSU,
    CCM_CCG_GPIO5,
    CCM_CCG_OCRAM_EXSC,
    CCM_CCG_CSI,
    CCM_CCG_IOMUXC_SNVS,
    CCM_CCG_LPI2C1,
    CCM_CCG_LPI2C2,
    CCM_CCG_LPI2C3,
    CCM_CCG_OCOTP,
    CCM_CCG_XBAR3,
    CCM_CCG_IPMUX1,
    CCM_CCG_IPMUX2,
    CCM_CCG_IPMUX3,
    CCM_CCG_XBAR1,
    CCM_CCG_XBA,
    CCM_CCG_GPIO3,
    CCM_CCG_LCD,
    CCM_CCG_PXP,
    CCM_CCG_FLEXIO2,
    CCM_CCG_LPUART5,
    CCM_CCG_SEMC,
    CCM_CCG_LPUART6,
    CCM_CCG_AOI1,
    CCM_CCG_LCDIF_PIX,
    CCM_CCG_GPIO4,
    CCM_CCG_EWM,
    CCM_CCG_WDOG1,
    CCM_CCG_FLEXRAM,
    CCM_CCG_ACMP1,
    CCM_CCG_ACMP2,
    CCM_CCG_ACMP3,
    CCM_CCG_ACMP4,
    CCM_CCG_OCRAM,
    CCM_CCG_IOMUXC_SNVS_GPR,
    CCM_CCG_SIM_M7_R,
    CCM_CCG_IOMUXC,
    CCM_CCG_IOMUXC_GPR,
    CCM_CCG_BEE,
    CCM_CCG_SIM_M7,
    CCM_CCG_TSC_DIG,
    CCM_CCG_SIM_M,
    CCM_CCG_SIM_EMC,
    CCM_CCG_PWM1,
    CCM_CCG_PWM2,
    CCM_CCG_PWM3,
    CCM_CCG_PWM4,
    CCM_CCG_QDC1,
    CCM_CCG_QDC2,
    CCM_CCG_QDC3,
    CCM_CCG_QDC4,
    CCM_CCG_ROM,
    CCM_CCG_FLEXIO1,
    CCM_CCG_WDOG3,
    CCM_CCG_DMA,
    CCM_CCG_KPP,
    CCM_CCG_WDOG2,
    CCM_CCG_AIPS_TZ4,
    CCM_CCG_SPDIF,
    CCM_CCG_SIM_MAIN,
    CCM_CCG_SAI1,
    CCM_CCG_SAI2,
    CCM_CCG_SAI3,
    CCM_CCG_LPUART1,
    CCM_CCG_LPUART7,
    CCM_CCG_SNVS_HP,
    CCM_CCG_SNVS_LP,
    CCM_CCG_USBOH3,
    CCM_CCG_USDHC1,
    CCM_CCG_USDHC2,
    CCM_CCG_DCDC,
    CCM_CCG_IPMUX4,
    CCM_CCG_FLEXSPI,
    CCM_CCG_TRNG,
    CCM_CCG_LPUART8,
    CCM_CCG_TIMER4,
    CCM_CCG_AIPS_TZ3,
    CCM_CCG_SIM_PER,
    CCM_CCG_ANADIG,
    CCM_CCG_LPI2C4,
    CCM_CCG_TIMER1,
    CCM_CCG_TIMER2,
    CCM_CCG_TIMER3,
    CCM_CCG_ENET2,
    CCM_CCG_FLEXSPI2,
    CCM_CCG_AXBS_I,
    CCM_CCG_CAN3_BUS,
    CCM_CCG_CAN3_SERIAL,
    CCM_CCG_AIPS_LITE,
    CCM_CCG_FLEXIO3
};

#define CCM_CCGR_DEVICE_REG_N(device) (device >> 4)
#define CCM_CCGR_DEVICE_BIT_N(device) ((device & 0b1111) << 1)

int ccm_set_core_clkf(int core_clkf, int desired_freq);
int ccm_calculate_core_clkf(int desired_freq);
void ccm_control_gate(int device, int activity_mode, bool wait);
void ccm_set_uart_clk(bool sauce_osc_clk_24m, int sauce_div_p2, bool wait);
#define ccm_get_core_freq() (((CCM_PLL_ARM_REF_OSC_FREQ * ((anatop.pll_arm.dr & ANATOP_PLL_ARM_BITMASK_DIV_SELECT) >> 1)) / (ccm.cacrr + 1)) / (((ccm.cbcdr >> CCM_CBCDR_BITS_AHB_PODF) & CCM_CBCDR_BITMASK_AHB_PODF) + 1))
#define ccm_get_core_clkf() ( \
    BITNVAL(CCM_CORE_CLKF_BITS_DIV_SELECT, (anatop.pll_arm.dr & ANATOP_PLL_ARM_BITMASK_DIV_SELECT)) \
    | BITNVAL(CCM_CORE_CLKF_BITS_ARM_PODF, (((ccm.cacrr >> CCM_CACCR_BITS_ARM_PODF) & CCM_CACCR_BITMASK_ARM_PODF) + 1)) \
    | BITNVAL(CCM_CORE_CLKF_BITS_AHB_PODF, (((ccm.cbcdr >> CCM_CBCDR_BITS_AHB_PODF) & CCM_CBCDR_BITMASK_AHB_PODF) + 1)) \
    | BITNVAL(CCM_CORE_CLKF_BITS_IPG_PODF, (((ccm.cbcdr >> CCM_CBCDR_BITS_IPG_PODF) & CCM_CBCDR_BITMASK_IPG_PODF) + 1)) \
    )

#endif